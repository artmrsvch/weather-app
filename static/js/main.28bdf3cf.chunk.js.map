{"version":3,"sources":["Components/Header/Header.tsx","Components/Forecast/WeatherCards.tsx","constants/index.ts","helpers/index.ts","Components/Forecast/Forecast.tsx","Components/SwitchButton/SortHistory.tsx","Components/History/History.tsx","Components/SwitchButton/SelectLang.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","createStyles","root","flexGrow","title","Header","lang","activePage","useHistory","location","pathname","localiz","forecast","history","installLang","classes","className","AppBar","position","Toolbar","Typography","variant","data-name","to","WeatherCards","weatherList","country","list","map","weather","iter","key","date","week","mounth","src","descript","icon","alt","temp","day","text","max","min","speed","towns","ru","en","mounths","weeks","appid","isZeroNeeded","thatDate","toString","getNameByIndexAndLang","index","langSeasonArray","langSeason","formatDate","timestamp","milliseconds","Number","weaterDate","Date","setTime","getDate","getDay","month","getMonth","format","data","localize","localisation","city","name","weater","dt","speedText","speedUnit","Math","ceil","tempMax","tempMin","str","description","toUpperCase","slice","requestForWeatherData","url","fetch","then","res","json","getWeaters","Promise","resolve","a","weaters","formattedWeater","console","log","parseLocalStorage","localStorage","JSON","parse","convertToDesiredFormat","setDate","getThisDate","createDateForSort","createDate","reqDate","requsetDate","item","img","saveRequstToLocalStorage","unpackStorage","push","internalDataStringify","stringify","setItem","hours","getHours","minutes","getMinutes","dayNumber","getTime","getFiveStory","state","store","length","neededIndex","Forecast","useState","setState","localTowns","townsArray","town","getTownsByLang","placeholder","getWeather","e","target","textContent","tagName","weatherData","useEffect","Autocomplete","id","onChange","options","getOptionLabel","option","style","width","boxSizing","renderInput","params","TextField","label","SortHistory","setDirection","new","old","sortDirection","status","internalData","concat","from","sort","b","Switch","defaultChecked","checked","updateData","color","inputProps","theme","margin","spacing","History","historyStore","setHistoryStore","storyData","useRef","story","btn","current","updateStore","countryWeather","iterator","Button","disabled","isDisabled","onClick","internal","SelectLang","chooseLang","App","userBrowserLang","navigator","language","split","setDefaulLanguage","path","render","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.28bdf3cf.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport {LangPropsType} from '../../helpers'\r\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport { AppBar, Toolbar, Typography} from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(() =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n  })\r\n);\r\n\r\nconst installLang = (lang: string) => {\r\n  return {\r\n    forecast: lang==='en' ? 'Forecast':'Прогноз',\r\n    history: lang === 'en' ? 'Watch History':'История просмотров',\r\n  }\r\n}\r\n\r\nexport const Header: React.FC<LangPropsType> = ({lang}) => {\r\n  const activePage: string = useHistory().location.pathname;\r\n\r\n  const localiz = installLang(lang)\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position='static'>\r\n        <Toolbar>\r\n          <Typography variant='h6' className={classes.title}>\r\n            Weather-App\r\n          </Typography>\r\n          \r\n          <NavLink\r\n            data-name='forecast'\r\n            className={`header-link ${activePage === '/forecast' && 'header-link_active'}`}\r\n            to='/forecast'>\r\n            {localiz.forecast}\r\n          </NavLink>\r\n          <NavLink\r\n            data-name='history'\r\n            className={`header-link ${activePage === '/history' && 'header-link_active'}`}\r\n            to='/history'>\r\n            {localiz.history}\r\n          </NavLink>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nimport { IWeatherList } from '../../helpers';\r\n\r\nexport const WeatherCards: React.FC<WeaterCardPropsType> = ({ weatherList }) => {\r\n  return (\r\n    <div className='forecast-weather'>\r\n      <h2 className='forecast-weather__title'>{weatherList.country}</h2>\r\n      <ul className='forecast-weather__list'>\r\n        {weatherList.list.map((weather, iter) => (\r\n          <li key={iter} className='forecast-weather__item'>\r\n            <h3 className='forecast-weather__headline'>\r\n              {weather.date.week} {weather.date.mounth}\r\n            </h3>\r\n            <div className='forecast-days'>\r\n              <div>\r\n                <div className='forecast-weather-main'>\r\n                  <img\r\n                    className='forecast-days__img'\r\n                    src={weather.descript.icon}\r\n                    alt='weather-icon'\r\n                  />\r\n                  <div className='forecast-weather-main__secondary'>\r\n                    <span className='forecast-weather-main__cels'>{weather.temp.day}</span>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className='forecast-weather-main__descript'>{weather.descript.text}</div>\r\n              </div>\r\n              <ul className='forecast-days__list'>\r\n                <li className='forecast-days__item'>{weather.temp.max}</li>\r\n                <li className='forecast-days__item'>{weather.temp.min}</li>\r\n                <li className='forecast-days__item'>{weather.speed}</li>\r\n              </ul>\r\n            </div>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\ntype WeaterCardPropsType = {\r\n  weatherList: IWeatherList;\r\n};\r\n","export const towns: ILangSeason[] = [\r\n  {\r\n    ru: 'Лондон',\r\n    en: 'London',\r\n  },\r\n  {\r\n    ru: 'Москва',\r\n    en: 'Moscow',\r\n  },\r\n  {\r\n    ru: 'Киев',\r\n    en: 'Kiev',\r\n  },\r\n  {\r\n    ru: 'Минск',\r\n    en: 'Minsk',\r\n  },\r\n  {\r\n    ru: 'Донецк',\r\n    en: 'Donetsk',\r\n  },\r\n  {\r\n    ru: 'Сочи',\r\n    en: 'Sochi',\r\n  },\r\n  {\r\n    ru: 'Рига',\r\n    en: 'Riga',\r\n  },\r\n  {\r\n    ru: 'Париж',\r\n    en: 'Paris',\r\n  },\r\n  {\r\n    ru: 'Рим',\r\n    en: 'Rome',\r\n  },\r\n  {\r\n    ru: 'Хабаровск',\r\n    en: 'Khabarovsk',\r\n  },\r\n  {\r\n    ru: 'Харьков',\r\n    en: 'Kharkiv',\r\n  },\r\n  {\r\n    ru: 'Ялта',\r\n    en: 'Yalta',\r\n  },\r\n];\r\n\r\nexport const mounths: ILangSeason[] = [\r\n  {\r\n    ru: 'Января',\r\n    en: 'January',\r\n  },\r\n  {\r\n    ru: 'Февраля',\r\n    en: 'February',\r\n  },\r\n  {\r\n    ru: 'Марта',\r\n    en: 'March',\r\n  },\r\n  {\r\n    ru: 'Апреля',\r\n    en: 'April',\r\n  },\r\n  {\r\n    ru: 'Мая',\r\n    en: 'May',\r\n  },\r\n  {\r\n    ru: 'Июня',\r\n    en: 'June',\r\n  },\r\n  {\r\n    ru: 'Июля',\r\n    en: 'July',\r\n  },\r\n  {\r\n    ru: 'Августа',\r\n    en: 'August',\r\n  },\r\n  {\r\n    ru: 'Сентября',\r\n    en: 'September',\r\n  },\r\n  {\r\n    ru: 'Октября',\r\n    en: 'Octomber',\r\n  },\r\n  {\r\n    ru: 'Ноября',\r\n    en: 'November',\r\n  },\r\n  {\r\n    ru: 'Декабря',\r\n    en: 'December',\r\n  },\r\n];\r\n\r\nexport const weeks: ILangSeason[] = [\r\n  {\r\n    ru: 'Воскресенье',\r\n    en: 'Sunday',\r\n  },\r\n  {\r\n    ru: 'Понедельник',\r\n    en: 'Monday',\r\n  },\r\n  {\r\n    ru: 'Вторник',\r\n    en: 'Tuesday',\r\n  },\r\n  {\r\n    ru: 'Среда',\r\n    en: 'Wednesday',\r\n  },\r\n  {\r\n    ru: 'Четверг',\r\n    en: 'Thursday',\r\n  },\r\n  {\r\n    ru: 'Пятница',\r\n    en: 'Friday',\r\n  },\r\n  {\r\n    ru: 'Суббота',\r\n    en: 'Sturday',\r\n  },\r\n];\r\n\r\nexport const appid: string = 'b1b35bba8b434a28a0be2a3e1071ae5b';\r\n\r\nexport interface ILangSeason {\r\n  ru: string;\r\n  en: string;\r\n}\r\n","import { appid, mounths, weeks, ILangSeason } from '../constants';\r\n\r\nconst isZeroNeeded = (thatDate: number): string => {\r\n  const limitWithZero = 10;\r\n\r\n  return thatDate < limitWithZero ? `0${thatDate}` : thatDate.toString();\r\n};\r\n\r\nconst getNameByIndexAndLang = (lang: string, index: number, langSeasonArray: ILangSeason[]) => {\r\n  const internal = langSeasonArray.map((langSeason) => {\r\n    return lang === 'en' ? langSeason.en : langSeason.ru;\r\n  });\r\n\r\n  return internal[index--]; //потому, что с нуля массив\r\n};\r\nexport const getTownsByLang = (lang: string, townsArray: ILangSeason[]): string[] => {\r\n  return townsArray.map((town) => {\r\n    return lang === 'en' ? town.en : town.ru;\r\n  });\r\n};\r\nconst formatDate = (timestamp: string, lang: string): IFormatDate => {\r\n  const milliseconds = Number(timestamp) * 1000;\r\n\r\n  const weaterDate = new Date();\r\n  weaterDate.setTime(milliseconds);\r\n\r\n  const day: string = isZeroNeeded(weaterDate.getDate());\r\n  const week: string = getNameByIndexAndLang(lang, weaterDate.getDay(), weeks);\r\n  const month: string = getNameByIndexAndLang(lang, weaterDate.getMonth(), mounths);\r\n\r\n  return { mounth: `${day} ${month}`, week };\r\n};\r\nconst firstLitToUpperCase = (str: string): string => str[0].toUpperCase() + str.slice(1);\r\n\r\nconst format = (data: any, lang: string): IWeatherList => {\r\n  const localize = localisation(lang);\r\n\r\n  return {\r\n    country: `${data.city.name}, ${data.city.country}`,\r\n    list: data.list.map((weater: any) => {\r\n      return {\r\n        date: formatDate(weater.dt, lang),\r\n        speed: `${localize.speedText} ${weater.speed} ${localize.speedUnit}`,\r\n        temp: {\r\n          day: `${Math.ceil(weater.temp.day)}°С`,\r\n          max: `${localize.tempMax} ${Math.ceil(weater.temp.max)}°С`,\r\n          min: `${localize.tempMin} ${Math.ceil(weater.temp.min)}°С`,\r\n        },\r\n        descript: {\r\n          icon: `http://openweathermap.org/img/w/${weater.weather[0].icon}.png`,\r\n          text: firstLitToUpperCase(weater.weather[0].description),\r\n        },\r\n      };\r\n    }),\r\n  };\r\n};\r\n\r\nconst requestForWeatherData = (city: string, lang: string = 'ru'): Promise<Object> => {\r\n  const url = `https://api.openweathermap.org/data/2.5/forecast/daily?q=${city}&units=metric&lang=${lang}&cnt=3&appid=${appid}`;\r\n\r\n  return fetch(url)\r\n    .then((res) => res.json())\r\n    .then((data) => data);\r\n};\r\n\r\nexport const getWeaters = (city: string, lang: string): Promise<IWeatherList> => {\r\n  return new Promise(async (resolve) => {\r\n    try {\r\n      const weaters = await requestForWeatherData(city, lang);\r\n      const formattedWeater = format(weaters, lang);\r\n\r\n      resolve(formattedWeater);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  });\r\n};\r\n\r\nconst localisation = (lang: string) => {\r\n  return {\r\n    tempMax: lang === 'en' ? 'Max t°:' : 'Макс t°:',\r\n    tempMin: lang === 'en' ? 'Min t°:' : 'Мин t°:',\r\n    speedUnit: lang === 'en' ? 'm/s' : 'м/c',\r\n    speedText: lang === 'en' ? 'Wind:' : 'Ветер:',\r\n  };\r\n};\r\nexport const parseLocalStorage = (): IStorageWeather[] | null => {\r\n  return localStorage.weather ? JSON.parse(localStorage.weather) : null;\r\n};\r\nconst convertToDesiredFormat = (data: IWeatherList, lang: string): IStorageWeather => {\r\n  const setDate = getThisDate(lang);\r\n\r\n  return {\r\n    createDateForSort: setDate.createDate,\r\n    reqDate: setDate.requsetDate,\r\n    country: data.country,\r\n    list: data.list.map((item) => {\r\n      return {\r\n        date: item.date.mounth,\r\n        week: item.date.week,\r\n        temp: item.temp.day,\r\n        img: item.descript.icon,\r\n        descript: item.descript.text,\r\n      };\r\n    }),\r\n  };\r\n};\r\nexport const saveRequstToLocalStorage = (data: IWeatherList, lang: string): void => {\r\n  if (localStorage.weather) {\r\n    const unpackStorage = parseLocalStorage()!;\r\n\r\n    unpackStorage.push(convertToDesiredFormat(data, lang));\r\n\r\n    const internalDataStringify = JSON.stringify(unpackStorage);\r\n\r\n    localStorage.setItem('weather', internalDataStringify);\r\n  } else {\r\n    const internalDataStringify = JSON.stringify([convertToDesiredFormat(data, lang)]);\r\n\r\n    localStorage.setItem('weather', internalDataStringify);\r\n  }\r\n};\r\n\r\nexport const getThisDate = (lang: string): IGetThisTime => {\r\n  const date = new Date();\r\n\r\n  const { hours, minutes, dayNumber, week, mounth } = {\r\n    hours: isZeroNeeded(date.getHours()),\r\n    minutes: isZeroNeeded(date.getMinutes()),\r\n    dayNumber: isZeroNeeded(date.getDate()),\r\n    week: getNameByIndexAndLang(lang, date.getDay(), weeks),\r\n    mounth: getNameByIndexAndLang(lang, date.getDay(), mounths),\r\n  };\r\n\r\n  return {\r\n    createDate: date.getTime().toString(),\r\n    requsetDate: `${hours}:${minutes}, ${dayNumber} ${mounth}, ${week}`,\r\n  };\r\n};\r\n\r\nexport const getFiveStory = (\r\n  state: IStorageWeather[],\r\n  store: IStorageWeather[]\r\n): IStorageWeather[] => {\r\n  if (state.length) {\r\n    const neededIndex = --state.length;\r\n\r\n    return store.slice(0, neededIndex + 5);\r\n  } else {\r\n    return store.slice(0, 5);\r\n  }\r\n};\r\ninterface IGetThisTime {\r\n  requsetDate: string;\r\n  createDate: string;\r\n}\r\ninterface IStorageListElement {\r\n  date: string;\r\n  week: string;\r\n  temp: string;\r\n  img: string;\r\n  descript: string;\r\n}\r\nexport interface IStorageWeather {\r\n  createDateForSort: string;\r\n  reqDate: string;\r\n  country: string;\r\n  list: IStorageListElement[];\r\n}\r\nexport interface IWeatherList {\r\n  country: string;\r\n  list: {\r\n    date: IFormatDate;\r\n    speed: string;\r\n    temp: {\r\n      day: string;\r\n      max: string;\r\n      min: string;\r\n    };\r\n    descript: {\r\n      icon: string;\r\n      text: string;\r\n    };\r\n  }[];\r\n}\r\ninterface IFormatDate {\r\n  mounth: string;\r\n  week: string;\r\n}\r\n\r\nexport type LangPropsType = {\r\n  lang: string;\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\n\r\nimport { WeatherCards } from './WeatherCards';\r\nimport { towns } from '../../constants';\r\nimport {\r\n  getWeaters,\r\n  getTownsByLang,\r\n  saveRequstToLocalStorage,\r\n  IWeatherList,\r\n  LangPropsType,\r\n} from '../../helpers';\r\n\r\nconst installLang = (lang: string) => {\r\n  return {\r\n    title:\r\n      lang === 'en' ? 'Current weather forecast for 3 days' : 'Актуальный прогноз погоды на 3 дня',\r\n    placeholder: lang === 'en' ? ' Choose a city' : 'Выберите город',\r\n  };\r\n};\r\n\r\nexport const Forecast: React.FC<LangPropsType> = ({ lang }) => {\r\n  const [state, setState] = useState<IWeatherList | null>(null);\r\n\r\n  const localTowns = getTownsByLang(lang, towns);\r\n  const localiz = installLang(lang);\r\n\r\n  const getWeather = async (e: React.ChangeEvent<any>) => {\r\n    const city: string = e.target.textContent;\r\n\r\n    if (e.target.tagName === 'LI') {\r\n      //неадекватная проверка, потому что автокомплит из библиотеки\r\n      //и нет возможности прикрутить data-key без рекурсий\r\n      const weatherData = await getWeaters(city, lang);\r\n\r\n      saveRequstToLocalStorage(weatherData, lang);\r\n\r\n      setState(weatherData);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setState(null); //сбрасываем погоду, для корректной смены языка\r\n  }, [lang]);\r\n\r\n  return (\r\n    <div className='container'>\r\n      <h1 className='forecast-title'>{localiz.title}</h1>\r\n      <div className='forecast'>\r\n        <div className='forecast__autocomplete'>\r\n          <Autocomplete\r\n            id='combo-box-demo'\r\n            onChange={getWeather}\r\n            options={localTowns}\r\n            getOptionLabel={(option) => option}\r\n            style={{ width: 700, boxSizing: 'border-box' }}\r\n            renderInput={(params) => (\r\n              <TextField {...params} label={localiz.placeholder} variant='outlined' />\r\n            )}\r\n          />\r\n        </div>\r\n        {state && <WeatherCards weatherList={state} />}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Switch } from '@material-ui/core';\r\nimport {LangPropsType, IStorageWeather} from '../../helpers'\r\n\r\nconst installLang = (lang: string) => {\r\n  return {\r\n    new:lang === 'en' ? 'New first' : 'Сначала новые',\r\n    old: lang === 'en' ? 'Old first' : 'Сначала старые',\r\n  };\r\n};\r\n\r\nexport const SortHistory: React.FC<SortHistoryPropType> = ({lang, data ,setDirection}) => {\r\n  const localiz = installLang(lang);\r\n  \r\n  const changeDirection= (e:React.ChangeEvent<HTMLInputElement>) => {\r\n    const status: boolean = e.target.checked\r\n    \r\n    const updateData = data ? sortDirection(data, status) : null\r\n    \r\n    setDirection(updateData)\r\n  }\r\n\r\n  const sortDirection = (data: IStorageWeather[], status: boolean) => {\r\n    const internalData = data.concat() //стейт рид онли\r\n    const {from, to}= {\r\n      //если false, то сначал новые\r\n      //можно знак равенства просто менять, но уже написал так)\r\n      from: !status ? -1 : 1,\r\n      to: !status ? 1 : -1,\r\n    }\r\n\r\n    return internalData.sort((a, b) => (Number(a.createDateForSort) < Number(b.createDateForSort)) ? from : to)\r\n  }\r\n  return(\r\n    <div className='direction-select'>\r\n      <span>{localiz.old}</span>\r\n      <Switch\r\n          defaultChecked={false}\r\n          onChange={changeDirection}\r\n          color=\"default\"\r\n          inputProps={{ 'aria-label': 'checkbox with default color' }}\r\n        />\r\n      <span>{localiz.new}</span>\r\n    </div>\r\n  )\r\n};\r\n\r\ninterface SortHistoryPropType extends LangPropsType  {\r\n  setDirection: React.Dispatch<React.SetStateAction<any>>\r\n  data: IStorageWeather[] | null\r\n}","import React, { useEffect, useState, useRef } from 'react';\r\n\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport { Button } from '@material-ui/core';\r\n\r\nimport { SortHistory } from '../SwitchButton/SortHistory';\r\nimport { LangPropsType, parseLocalStorage, getFiveStory, IStorageWeather } from '../../helpers';\r\n\r\nconst installLang = (lang: string) => {\r\n  return {\r\n    title: lang === 'en' ? 'Weather View History' : 'История просмотров погоды',\r\n    story: lang === 'en' ? 'You have not watched the weather' : 'Вы еще не просмотривали погоду',\r\n    btn: lang === 'en' ? 'Show more' : 'Показать еще',\r\n  };\r\n};\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      '& > *': {\r\n        margin: theme.spacing(1),\r\n      },\r\n    },\r\n  })\r\n);\r\nexport const History: React.FC<LangPropsType> = ({ lang }) => {\r\n  const [historyStore, setHistoryStore] = useState<IStorageWeather[]>([]);\r\n\r\n  const classes = useStyles(); //стили для кнопки\r\n\r\n  const storyData = useRef<IStorageWeather[] | null>(null);\r\n\r\n  const localiz = installLang(lang);\r\n\r\n  const clickMoreStory = (): void => {\r\n    const internal = getFiveStory(historyStore, storyData.current!);\r\n    setHistoryStore(internal);\r\n  };\r\n\r\n  const isDisabled = (storyData: any, historyStore: any) => {\r\n    if (!historyStore || !storyData) return true;\r\n    if (storyData.length === historyStore.length) return true;\r\n\r\n    return false;\r\n  };\r\n\r\n  useEffect(() => {\r\n    const store: IStorageWeather[] | null = parseLocalStorage();\r\n\r\n    if (store) {\r\n      storyData.current = store;\r\n      const updateStore = getFiveStory(historyStore, storyData.current!);\r\n\r\n      setHistoryStore(updateStore);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div className='container container-history'>\r\n      <h1 className='title'>{localiz.title}</h1>\r\n      <SortHistory data={historyStore} lang={lang} setDirection={setHistoryStore} />\r\n      <div className='history'>\r\n        <ul className='history-list'>\r\n          {!historyStore && localiz.story}\r\n          {historyStore &&\r\n            historyStore.map((countryWeather, iter) => (\r\n              <li key={iter} className='history-list__item'>\r\n                <div className='history-list-time'>\r\n                  <div className='history-list-time__date'>{countryWeather.reqDate}</div>\r\n                  <h3 className='history-list-time__country'>{countryWeather.country}</h3>\r\n                </div>\r\n                <ul className='history-weater-list'>\r\n                  {countryWeather.list.map((weather, iterator) => (\r\n                    <li key={iterator} className='history-weater-list__item'>\r\n                      <div className='history-weater-list__date'>\r\n                        <div className='history-weater-list__day'>{weather.date}</div>\r\n                        <div className='history-weater-list__day'>{weather.week}</div>\r\n                      </div>\r\n\r\n                      <div className='history-weater-list__info'>\r\n                        <span className='history-weater-list__temp'>{weather.temp}</span>\r\n                        <img src={weather.img} alt='weater-pic' />\r\n                      </div>\r\n                      <div className='history-weater-list__descript'>{weather.descript}</div>\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              </li>\r\n            ))}\r\n        </ul>\r\n      </div>\r\n      <div className={classes.root}>\r\n        <Button\r\n          disabled={isDisabled(storyData.current, historyStore)}\r\n          onClick={clickMoreStory}\r\n          variant='contained'>\r\n          {localiz.btn}\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Switch } from '@material-ui/core';\r\nimport {LangPropsType} from '../../helpers'\r\n\r\nexport const SelectLang: React.FC<SelectLangPropType> = ({lang, chooseLang}) => {\r\n  const selectLang= (e:React.ChangeEvent<HTMLInputElement>) => {\r\n    chooseLang(e.target.checked ? 'en' : 'ru')\r\n  }\r\n\r\n  return(\r\n    <div className='lang-select'>\r\n      <span>RU</span>\r\n      <Switch\r\n          checked={lang==='ru'? false : true}\r\n          onChange={selectLang}\r\n          color=\"default\"\r\n          inputProps={{ 'aria-label': 'checkbox with default color' }}\r\n        />\r\n      <span>EN</span>\r\n    </div>\r\n  )\r\n};\r\n\r\ninterface SelectLangPropType extends LangPropsType  {\r\n  chooseLang: React.Dispatch<React.SetStateAction<string>>\r\n}","import React, { useState } from 'react';\nimport { Route, Redirect, Switch } from 'react-router-dom';\n\nimport { Header } from './Components/Header/Header';\nimport { Forecast } from './Components/Forecast/Forecast';\nimport { History } from './Components/History/History';\nimport { SelectLang } from './Components/SwitchButton/SelectLang';\n\nconst App: React.FC = () => {\n  const setDefaulLanguage = () => {\n    const userBrowserLang = navigator.language.split('-')[0];\n\n    return userBrowserLang !== 'ru' && userBrowserLang !== 'en' ? 'ru' : userBrowserLang;\n  };\n\n  const [state, setState] = useState<string>(setDefaulLanguage());\n\n  return (\n    <div className='app'>\n      <Header lang={state} />\n      <SelectLang lang={state} chooseLang={setState} />\n      <Switch>\n        <Route path='/forecast' render={() => <Forecast lang={state} />} />\n        <Route path='/history' render={() => <History lang={state}/>} />\n        <Redirect to='/forecast' />\n      </Switch>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\nimport './styles/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}